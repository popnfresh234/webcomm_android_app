import { IOperationHeader, IPolicyVo, IExtension, IDisplayPNGCharacteristicsDescriptor } from '@/utils/fido/type'

// Step 2~5 的resp
export interface IRegistrationRequest {
    // FIDO Server的驗證碼
    challenge: string
    // Operation Header, Header的op欄位必須要設定為Reg
    header: IOperationHeader[]
    // 註冊流程合法與不合法的驗證器條件描述
    policy: IPolicyVo[]
    // 使用者名稱
    username: string

}
// Step 11~20 doRegistration
export interface IDoRegistrationOptions {
    req: string
    userVerification: string
    displayName: string
}

export interface IAuthenticatorRegistrationAssertion{
    // (1.)if is AuthenticatorRegistrationAssertion, this field contains the TAG_UAFV1_REG_ASSERTION object containing the assertion scheme specific KeyRegistrationData (KRD) object which in turn contains the newly generated UAuth.pub and is signed by the Attestation Private Key.(2.)if is AuthenticatorSignAssertion, this field contains the assertion containing a signature generated by UAuth.priv.
    assertion:string

// The name of the Assertion Scheme used to encode the assertion.
assertionScheme:string

// Contains Extensions prepared by the authenticator.
exts:IExtension[]

// Supported transaction PNG type.
tcDisplayPNGCharacteristics:IDisplayPNGCharacteristicsDescriptor[]
}

// Step 26 ~ 27 Sample Code
// 當server成功回傳resp且為成功的resp才需呼叫該api
export interface ISyncRegDataOptions {
    username: string
    regData1: Map<string, string>

}
